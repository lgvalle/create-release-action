name: 'Auto Create Release'
description: 'Automatically creates a new release listing all commits since the previous release'
branding:
  icon: 'box'
  color: 'yellow'
inputs:
  openai-api-key:
    description: 'Your own OpenAI API key'
    required: false
  github-token:
    description: 'Your Github token'
    required: true
  branch-name:
    description: 'The name of the branch to create the release from'
    required: true
runs:      
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      
    - id: create_commit_log
      shell: bash
      run: |
        git fetch origin
        
        current_branch=${{ inputs.branch-name }}

        # Define the git format
        commit_log_format="--pretty=format:\"%h - %an - %ad - %s\" --date=default"

        if [ -z "$current_branch" ]; then
          echo "Error: Missing current branch name." >&2
          exit 1
        fi

        # Get a list of all tags sorted by tagger date
        tags_sorted_by_date=$(git tag --sort='-creatordate')

        # Find the previous tag based on the tagger date
        previous_tag=""
        for tag in $tags_sorted_by_date; do
          if git branch --contains $tag | grep -q "$current_branch"; then
            previous_tag=$tag
            break
          fi
        done

        # Calculate the commit log
        if [ -z "$previous_tag" ]; then
          git_command="git log $commit_log_format"
        else
          git_command="git log $previous_tag..$current_branch $commit_log_format"
        fi

        echo "$git_command"
        commit_log=$(eval $git_command)

        echo "COMMIT_LOG=$commit_log" >> "$GITHUB_OUTPUT"

    - id: summarise_commit_log
      shell: bash
      if: ${{ inputs.openai-api-key }}
      env:
        COMMIT_LOG: ${{ steps.create_commit_log.outputs.COMMIT_LOG }}
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
      run: |
        pip install openai
        summary=$(python ./src/query_openai.py --changelog "$COMMIT_LOG" --api-key $OPENAI_API_KEY)
        echo "LOG_SUMMARY=$summary" >> "$GITHUB_OUTPUT"

    - id: create_release
      shell: bash
      env:
        COMMIT_LOG: ${{ steps.create_commit_log.outputs.COMMIT_LOG }}
        LOG_SUMMARY: ${{ steps.summarise_commit_log.outputs.LOG_SUMMARY }}
      run: |
        # Remove quotes to prevent malformed JSON
        COMMIT_LOG=$(echo "$COMMIT_LOG" | sed 's/^"\(.*\)"$/\1/')
        RELEASE_BODY="$LOG_SUMMARY\n\n$COMMIT_LOG"
        
        # Create a JSON payload using a heredoc
        JSON_PAYLOAD=$(cat <<EOF
        {
          "tag_name": "${{ github.head_ref }}",
          "name": "${{ github.head_ref }}",
          "body": "$RELEASE_BODY",
          "draft": false,
          "prerelease": false,
          "generate_release_notes": false
        }
        EOF
        )

        echo "JSON PAYLOAD $JSON_PAYLOAD"

        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ inputs.github-token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/releases \
            -d "$JSON_PAYLOAD"